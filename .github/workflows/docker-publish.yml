name: Docker

on:
  push:
    branches:
      - master
      - dev
    tags:
      - v*

jobs:
  push:
    name: Build and Push Docker App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install docker app plugin
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled
          export OSTYPE="$(uname | tr A-Z a-z)"
          curl -fsSL --output "/tmp/docker-app-${OSTYPE}.tar.gz" "https://github.com/docker/app/releases/download/v0.9.1-beta3/docker-app-${OSTYPE}.tar.gz"
          tar xf "/tmp/docker-app-${OSTYPE}.tar.gz" -C /tmp/
          mkdir -p ~/.docker/cli-plugins && cp "/tmp/docker-app-plugin-${OSTYPE}" ~/.docker/cli-plugins/docker-app

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set app name and version
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Use Docker `latest` tag convention
          [ "$VERSION" == "dev" ] && VERSION=next

          echo "IMAGE_TAG=$IMAGE_ID:$VERSION" >> $GITHUB_ENV

          echo IMAGE_TAG=${{env.IMAGE_TAG}}
      
      - name: Build docker app
        run: |
          docker app build dot-base.dockerapp -t ${{env.IMAGE_TAG}}

      - name: Push docker app
        run: |
          docker app push ${{env.IMAGE_TAG}}
